---
title: "Modeling"
author: "Chris Hill"
format: 
  html:
    toc: true
    toc-title: "Contents"
    toc-depth: 3
editor: visual
---

```{r}
#| label: setup

library(tidymodels)
library(doFuture)

registerDoFuture()
plan(multisession)

set.seed(123)
```

# Introduction



## Data Processing

```{r}
#| label: data-processing

data <- read.csv("diabetes_binary_health_indicators_BRFSS2015.csv")

data$Diabetes_binary <- factor(data$Diabetes_binary, 
                                levels = c(0, 1, 2), 
                                labels = c("No Diabetes", "Prediabetes", 
                                           "Diabetes"))

binary_vars <- c("HighBP", "HighChol", "CholCheck", "Smoker", "Stroke", 
                 "HeartDiseaseorAttack", "PhysActivity", "Fruits", "Veggies", 
                 "HvyAlcoholConsump", "AnyHealthcare", "NoDocbcCost", 
                 "DiffWalk", "Sex")
data[binary_vars] <- lapply(data[binary_vars], factor, 
                            levels = c(0, 1), 
                            labels = c("No", "Yes"))

data$GenHlth <- factor(data$GenHlth, 
                       levels = 1:5, 
                       labels = c("Excellent", "Very Good", "Good", "Fair", 
                                  "Poor"), 
                       ordered = TRUE)

age_levels <- c("18-24", "25-29", "30-34", "35-39", "40-44", "45-49", 
                "50-54", "55-59", "60-64", "65-69", "70-74", "75-79", 
                "80 or older")
data$Age <- factor(data$Age, 
                   levels = 1:13, 
                   labels = age_levels, 
                   ordered = TRUE)

education_levels <- c("Never attended school or only kindergarten", 
                      "Elementary", 
                      "Some high school", 
                      "High school graduate", 
                      "Some college", 
                      "College graduate")
data$Education <- factor(data$Education, 
                         levels = 1:6, 
                         labels = education_levels, 
                         ordered = TRUE)

income_levels <- c("Less than $10,000", 
                   "$10,000 to $15,000", 
                   "$15,000 to $20,000", 
                   "$20,000 to $25,000", 
                   "$25,000 to $35,000", 
                   "$35,000 to $50,000", 
                   "$50,000 to $75,000", 
                   "$75,000 or more")
data$Income <- factor(data$Income, 
                      levels = 1:8, 
                      labels = income_levels, 
                      ordered = TRUE)

data$Diabetes_binary <- droplevels(data$Diabetes_binary)
```

## Data Splitting

```{r}
#| label: data-split

split <- initial_split(data, prop = 0.7, strata = Diabetes_binary)
train_data <- training(split)
test_data <- testing(split)
```

## Metric

```{r}
#| label: metric

log_loss_metric <- metric_set(mn_log_loss, accuracy)
```

## Cross Validation

```{r}
#| label: cross-validation

folds <- vfold_cv(train_data, v = 5, strata = Diabetes_binary)
```

# Classification Tree

## Recipe

```{r}
#| label: tree-recipe

tree_recipe <- recipe(Diabetes_binary ~ BMI + Sex + Age + Income + HeartDiseaseorAttack, 
                      data = train_data) |>
  step_dummy(all_nominal_predictors(), -all_outcomes())
```

```{r}
#| label: tree-prep

prepared_recipe <- prep(tree_recipe)
baked <- bake(prepared_recipe, new_data = NULL)
baked
```

## Model

```{r}
#| label: tree-model

tree_model <- decision_tree(cost_complexity = tune()) |>
  set_engine("rpart") |>
  set_mode("classification")
```

## Workflow

```{r}
#| label: tree-workflow

tree_workflow <- workflow() |>
  add_recipe(tree_recipe) |>
  add_model(tree_model)
```

## Tuning

```{r}
#| label: tree-tuning
#| cache: true
#| dependson: "tree-model"

tree_grid <- grid_regular(cost_complexity(range = c(-6, -2)), 
                          levels = 10)

tree_tuning <- tune_grid(
  tree_workflow,
  resamples = folds,
  grid = tree_grid,
  metrics = log_loss_metric
)
```

## Best Model

```{r}
#| label: best-tree

best_tree <- tree_tuning |>
  select_best(metric = "mn_log_loss")
best_tree

final_tree_workflow <- finalize_workflow(tree_workflow, best_tree)

final_tree_model <- fit(final_tree_workflow, data = train_data)
```

# Random Forest

## Recipe

Same as the classification tree.

## Model

```{r}
#| label: rf-model

rf_model <- rand_forest(mtry = tune(), trees = 500) |>
  set_engine("ranger") |>
  set_mode("classification")
```

## Workflow

```{r}
#| label: rf-workflow

rf_workflow <- workflow() |>
  add_recipe(tree_recipe) |>
  add_model(rf_model)
```

## Tuning

```{r}
#| label: rf-tuning
#| cache: true
#| dependson: ["rf-model", "rf-workflow", "tree-model"]

rf_grid <- grid_regular(mtry(range = c(1, 5)), levels = 5)

rf_tuning <- tune_grid(
  rf_workflow,
  resamples = folds,
  grid = rf_grid,
  metrics = log_loss_metric
)
```

## Best Model

```{r}
#| label: best-rf

best_rf <- rf_tuning |>
  select_best(metric = "mn_log_loss")
best_rf

final_rf_workflow <- finalize_workflow(rf_workflow, best_rf)

final_rf_model <- fit(final_rf_workflow, data = train_data)
```

## Tuning Results Visualization

```{r}
#| label: tuning-results

tree_results <- collect_metrics(tree_tuning)
rf_results <- collect_metrics(rf_tuning)

bind_rows(
  tree_results |> mutate(model = "Tree"),
  rf_results |> mutate(model = "Random Forest")
) |> 
  ggplot(aes(x = .metric, y = mean, color = model)) +
  geom_point(position = position_dodge(0.3)) +
  geom_errorbar(aes(ymin = mean - std_err, ymax = mean + std_err), position = position_dodge(0.3)) +
  facet_wrap(~.metric, scales = "free_y") +
  labs(
    title = "Comparison of Model Metrics",
    x = "Metric",
    y = "Mean Value"
  ) +
  theme_minimal()
```

# Model Comparison

```{r}
#| label: model-comparison

tree_results <- final_tree_workflow |>
  last_fit(split, metrics = log_loss_metric) |>
  collect_metrics()

rf_results <- final_rf_workflow |>
  last_fit(split, metrics = log_loss_metric) |>
  collect_metrics()

list(
  Classification_Tree = tree_results,
  Random_Forest = rf_results
)
```

# Fit Best Model to Entire Dataset

```{r}
#| label: fit-full

final_rf_model_full <- fit(final_rf_workflow, data = data)

saveRDS(final_rf_model_full, "final_rf_model.rds")
```

